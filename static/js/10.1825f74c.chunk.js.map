{"version":3,"sources":["components/VisibilitySensor.js","../node_modules/react-bootstrap/esm/ProgressBar.js","../node_modules/react-bootstrap/esm/ElementChildren.js","components/Skills.js"],"names":["VisibilitySensor","props","state","active","this","once","children","theRest","onChange","isVisible","setState","Component","defaultProps","getPercentage","now","min","max","percentage","Math","round","renderProgressBar","_ref","ref","_classNames","label","srOnly","striped","animated","className","style","variant","bsPrefix","_objectWithoutPropertiesLoose","React","createElement","_extends","role","classNames","width","ProgressBar","forwardRef","_ref2","isChild","useBootstrapPrefix","wrapperProps","func","index","Children","map","child","isValidElement","cloneElement","displayName","Div","styled","div","Skills","data","barStyle","margin","padding","section","menu","skills","colors","key","delay","to","opacity","transform","item","skill","number","rating"],"mappings":"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","file":"static/js/10.1825f74c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport VSensor from \"react-visibility-sensor\";\r\n\r\nclass VisibilitySensor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      active: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { active } = this.state;\r\n    const { once, children, ...theRest } = this.props;\r\n    return (\r\n      <VSensor\r\n        active={active}\r\n        onChange={(isVisible) =>\r\n          once &&\r\n          isVisible &&\r\n          this.setState({ active: false }, () => {}\r\n            //console.log(\"turned the thing off!\")\r\n          )\r\n        }\r\n        {...theRest}\r\n      >\r\n        {({ isVisible }) => children({ isVisible })}\r\n      </VSensor>\r\n    );\r\n  }\r\n}\r\n\r\nVisibilitySensor.propTypes = {\r\n  once: PropTypes.bool,\r\n  children: PropTypes.func.isRequired,\r\n};\r\n\r\nVisibilitySensor.defaultProps = {\r\n  once: false,\r\n};\r\n\r\nexport default VisibilitySensor;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nvar ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  var error = null;\n  React.Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n\n\n    var element = /*#__PURE__*/React.createElement(ProgressBar, null);\n    if (child.type === element.type) return;\n    var childIdentifier = React.isValidElement(child) ? child.type.displayName || child.type.name || child.type : child;\n    error = new Error(\"Children of \" + componentName + \" can contain only ProgressBar \" + (\"components. Found \" + childIdentifier + \".\"));\n  });\n  return error;\n}\n\nvar defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar(_ref, ref) {\n  var _classNames;\n\n  var min = _ref.min,\n      now = _ref.now,\n      max = _ref.max,\n      label = _ref.label,\n      srOnly = _ref.srOnly,\n      striped = _ref.striped,\n      animated = _ref.animated,\n      className = _ref.className,\n      style = _ref.style,\n      variant = _ref.variant,\n      bsPrefix = _ref.bsPrefix,\n      props = _objectWithoutPropertiesLoose(_ref, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"className\", \"style\", \"variant\", \"bsPrefix\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, props, {\n    role: \"progressbar\",\n    className: classNames(className, bsPrefix + \"-bar\", (_classNames = {}, _classNames[\"bg-\" + variant] = variant, _classNames[bsPrefix + \"-bar-animated\"] = animated, _classNames[bsPrefix + \"-bar-striped\"] = animated || striped, _classNames)),\n    style: _extends({\n      width: getPercentage(now, min, max) + \"%\"\n    }, style),\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }), srOnly ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, label) : label);\n}\n\nvar ProgressBar = React.forwardRef(function (_ref2, ref) {\n  var isChild = _ref2.isChild,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"isChild\"]);\n\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  var min = props.min,\n      now = props.now,\n      max = props.max,\n      label = props.label,\n      srOnly = props.srOnly,\n      striped = props.striped,\n      animated = props.animated,\n      bsPrefix = props.bsPrefix,\n      variant = props.variant,\n      className = props.className,\n      children = props.children,\n      wrapperProps = _objectWithoutPropertiesLoose(props, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"bsPrefix\", \"variant\", \"className\", \"children\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, wrapperProps, {\n    className: classNames(className, bsPrefix)\n  }), children ? map(children, function (child) {\n    return cloneElement(child, {\n      isChild: true\n    });\n  }) : renderProgressBar({\n    min: min,\n    now: now,\n    max: max,\n    label: label,\n    srOnly: srOnly,\n    striped: striped,\n    animated: animated,\n    bsPrefix: bsPrefix,\n    variant: variant\n  }, ref));\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","import React from 'react';\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\n\nfunction map(children, func) {\n  var index = 0;\n  return React.Children.map(children, function (child) {\n    return React.isValidElement(child) ? func(child, index++) : child;\n  });\n}\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\n\n\nfunction forEach(children, func) {\n  var index = 0;\n  React.Children.forEach(children, function (child) {\n    if (React.isValidElement(child)) func(child, index++);\n  });\n}\n\nexport { map, forEach };","import React from 'react';\r\nimport { ProgressBar } from \"react-bootstrap\";\r\nimport styled from 'styled-components';\r\nimport { Spring } from \"react-spring/renderprops\";\r\nimport VisibilitySensor from \"./VisibilitySensor\";\r\n\r\nconst Div = styled.div`    \r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    //height: 100vh;\r\n    min-height: 100vh;\r\n    //justify-content: center;\r\n    align-items: center; \r\n    background-color: #292928;\r\n    background: #000000 url('./images/bg/skills.jpg') no-repeat top center;\r\n    //background-size: 100% auto;\r\n    h1{\r\n        margin-top: 15vh;\r\n    }\r\n    ul{\r\n        list-style-type:none;\r\n    }\r\n    li{\r\n        margin-bottom:20px;\r\n    }\r\n`\r\n\r\nconst Skills = (props) => {\r\n    const { data } = props;\r\n    const barStyle = {\r\n        width: '60%',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n    return (\r\n        data.map((section, index) => {\r\n            const {menu, skills} = section;\r\n            const colors = [\"info\",\"warning\", \"\",\"success\",\"danger\"];\r\n\r\n            return (\r\n                <Div key={\"skills\"} >                   \r\n\r\n                    <VisibilitySensor once>\r\n                        {({ isVisible }) => (\r\n                            <>\r\n                                <Spring delay={300} to={{\r\n                                    opacity: isVisible ? 1 : 0,\r\n                                    transform: isVisible\r\n                                    ? \"scale(1)\"\r\n                                    : \"scale(2)\",\r\n                                }}>\r\n                                    {(props) => (\r\n                                        <h1 style={{ ...props }}>{menu[1]}</h1>\r\n                                    )}\r\n                                </Spring> \r\n                                <ul style={barStyle}>\r\n                                {\r\n                                    skills.map((item,index) => {\r\n                                        return (\r\n                                            <li key={index}>                                                        \r\n                                                <em>{item.skill}</em>\r\n                                                <Spring\r\n                                                    delay={50 * (index+1)}                                    \r\n                                                    to={{ number: isVisible ? 1 : 0 }}>\r\n                                                    {props => <ProgressBar variant={colors[index]} now={item.rating * props.number} />}\r\n                                                </Spring>                                                       \r\n                                                                                                       \r\n                                            </li>\r\n                                        )\r\n                                    })                    \r\n                                }                                            \r\n                                </ul>                                 \r\n                            </>  \r\n                        )}\r\n                    </VisibilitySensor>                    \r\n                </Div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default Skills;"],"sourceRoot":""}