{"version":3,"sources":["actions/index.js","constants.js","App.js","serviceWorker.js","reducers/index.js","index.js","store.js"],"names":["fetchBegin","type","About","React","lazy","Skills","Projects","Clients","Contact","Main","styled","div","Div","App","getData","this","props","data","isLoading","err","message","Navbar","collapseOnSelect","expand","bg","variant","fixed","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","style","margin","scrollTargetIds","offset","activeNavClass","scrollDuration","headerBackground","map","section","index","menu","key","Link","fallback","Component","connect","state","dispatch","axios","get","then","resp","payload","fetchSuccess","catch","console","log","fetchFailure","Boolean","window","location","hostname","match","initialState","action","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8d99210a.chunk.js","sourcesContent":["import * as constants from \"../constants\";\r\nimport axios from 'axios';\r\n\r\nconst fetchBegin = () => ({\r\n    type: constants.FETCH_BEGIN\r\n});\r\n\r\nconst fetchSuccess = resp => ({\r\n    type: constants.FETCH_SUCCESS,\r\n    payload: resp\r\n});\r\n\r\nconst fetchFailure = err => ({\r\n    type: constants.FETCH_FAILURE,\r\n    payload: err\r\n});\r\n\r\nexport const getData = () => dispatch => {\r\n    dispatch(fetchBegin);\r\n    axios.get(\"./db.json\")\r\n    .then(resp => {\r\n      //console.log(\"response\",resp.data);\r\n      dispatch(fetchSuccess(resp.data));\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n      dispatch(fetchFailure(err));\r\n    })\r\n}","export const FETCH_BEGIN = \"FETCH_BEGIN\";\r\nexport const FETCH_SUCCESS = \"FETCH_SUCCESS\";\r\nexport const FETCH_FAILURE = \"FETCH_FAILURE\";","import React, {Component, Fragment, Suspense} from 'react';\r\nimport './App.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { getData } from './actions/index';\r\n\r\nimport styled from 'styled-components';\r\nimport ScrollspyNav from \"react-scrollspy-nav\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst About = React.lazy(() => import('./components/About'));\r\nconst Skills = React.lazy(() => import('./components/Skills'));\r\nconst Projects = React.lazy(() => import('./components/Projects'));\r\nconst Clients = React.lazy(() => import('./components/Clients'));\r\nconst Contact = React.lazy(() => import('./components/Contact'));\r\n\r\nconst Main = styled.div`\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n  overflow-x: hidden;\r\n  animation: fadein 2s;\r\n  \r\n  div[data-nav] ul {\r\n      display: flex;\r\n      flex-direction: row;\r\n      list-style-type: none;\r\n      justify-content: center;\r\n      margin: 0;\r\n      padding: 0;\r\n  }\r\n  div[data-nav] a {\r\n    font-size: 0.6em; \r\n    padding: 9px 20px 10px !important;\r\n  }\r\n  /*.is-active{\r\n    background: #1e1e1e;\r\n    color: white !important;\r\n    pointer-events: none;\r\n  } */\r\n  .bg-black{\r\n    background-color: black;\r\n    padding: 0;\r\n  }\r\n\r\n  @media only screen and (max-width: 767px) {\r\n    div[data-nav] ul {\r\n      flex-direction: column;\r\n      text-align: center;\r\n    }\r\n    div[data-nav] a {\r\n      font-size: 1.5em;\r\n    }\r\n  }\r\n`\r\nconst Div = styled.div`\r\n  min-width: 100%;\r\n`\r\nclass App extends Component {\r\n  componentDidMount(){\r\n    const { getData } = this.props;\r\n    getData();\r\n  }\r\n\r\n  render(){\r\n    const { data, isLoading, err } = this.props;\r\n    \r\n    return (\r\n      <Main>\r\n        {err ? <p>{err.message}</p> : null}\r\n        \r\n        {\r\n          !isLoading ? \r\n            <Fragment>\r\n              <Navbar collapseOnSelect expand=\"md\" bg=\"black\" variant=\"dark\" fixed=\"top\">\r\n                <Navbar.Brand href=\"#home\"></Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                  <Nav className=\"mr-auto\" style={{margin:\"auto\"}}>\r\n                    <ScrollspyNav\r\n                      scrollTargetIds={[\"section_1\", \"section_2\", \"section_3\",\"section_4\"]}\r\n                      offset={0}\r\n                      activeNavClass=\"is-active\"\r\n                      scrollDuration=\"1000\"\r\n                      headerBackground=\"false\"\r\n                    >  \r\n                      {\r\n                        data.map((section, index) => {\r\n                          const {menu} = section;\r\n                          return (\r\n                            <ul key={index}>\r\n                              <li><Nav.Link href=\"/\">{menu[0]}</Nav.Link></li>\r\n                              <li><Nav.Link href=\"#section_1\">{menu[1]}</Nav.Link></li>\r\n                              <li><Nav.Link href=\"#section_2\">{menu[2]}</Nav.Link></li>\r\n                              <li><Nav.Link href=\"#section_3\">{menu[3]}</Nav.Link></li>\r\n                              <li><Nav.Link href=\"#section_4\">{menu[4]}</Nav.Link></li>\r\n                            </ul> \r\n                          )\r\n                        })\r\n                      }                                                  \r\n                    </ScrollspyNav>\r\n                  </Nav>\r\n                </Navbar.Collapse>\r\n              </Navbar>\r\n              \r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                <Div key=\"1\">\r\n                  <About data={data}/>\r\n                  <div id=\"section_1\"><Skills data={data}/></div>\r\n                  <div id=\"section_2\"><Projects data={data}/></div>\r\n                  <div id=\"section_3\"><Clients data={data}/></div>             \r\n                  <div id=\"section_4\"><Contact data={data}/></div>             \r\n                </Div>\r\n              </Suspense>\r\n            </Fragment>\r\n          :\r\n            <p>loading..</p>\r\n        }              \r\n      </Main>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  data: state.data,\r\n  isLoading: state.isLoading,\r\n  err: state.err\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n getData: () => dispatch(getData())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as constants from \"../constants\";\r\n\r\nconst initialState = {\r\n    isLoading: true,\r\n    data: {},\r\n    err: ''\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n switch (action.type) {\r\n  case constants.FETCH_BEGIN:\r\n   return {\r\n    ...state\r\n   }\r\n  case constants.FETCH_SUCCESS:\r\n   return {\r\n    ...state, data: action.payload, isLoading: false\r\n   }\r\n  case constants.FETCH_FAILURE:\r\n   return {\r\n    ...state, err: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"react-app-polyfill/ie11\";\r\nimport \"react-app-polyfill/stable\";\r\n\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={configureStore()}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\n\r\nexport default function configureStore() {\r\n return createStore(\r\n  rootReducer,\r\n   applyMiddleware(thunk)\r\n );\r\n}"],"sourceRoot":""}