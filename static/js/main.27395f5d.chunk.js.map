{"version":3,"sources":["actions/index.js","constants.js","components/VisibilitySensor.js","components/About.js","components/Skills.js","components/Popup.js","components/Projects.js","components/Clients.js","components/Contact.js","App.js","serviceWorker.js","reducers/index.js","index.js","store.js"],"names":["fetchBegin","type","VisibilitySensor","props","state","active","this","once","children","theRest","onChange","isVisible","setState","Component","defaultProps","Div","styled","div","About","data","map","section","about","key","delay","from","transform","to","opacity","style","title","desc","Skills","barStyle","width","margin","padding","index","menu","skills","colors","item","skill","number","ProgressBar","variant","now","rating","Img","img","P","p","Popup","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","src","alt","Images","Wrapper","Projects","React","useState","modalShow","setModalShow","setTitle","setDesc","setImg","projects","thumb","onClick","onImgClick","show","onHide","Clients","clients","Icons","Contact","contact","typeArr","email","linkedin","github","tttleArr","iconArr","faEnvelope","faLinkedin","faGithub","config","duration","href","target","rel","icon","Main","App","getData","isLoading","err","message","Navbar","collapseOnSelect","expand","bg","fixed","Brand","Toggle","aria-controls","Collapse","Nav","className","scrollTargetIds","offset","activeNavClass","scrollDuration","headerBackground","Link","connect","dispatch","axios","get","then","resp","payload","fetchSuccess","catch","console","log","fetchFailure","Boolean","window","location","hostname","match","initialState","action","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.27395f5d.chunk.js","sourcesContent":["import * as constants from \"../constants\";\r\nimport axios from 'axios';\r\n\r\nconst fetchBegin = () => ({\r\n    type: constants.FETCH_BEGIN\r\n});\r\n\r\nconst fetchSuccess = resp => ({\r\n    type: constants.FETCH_SUCCESS,\r\n    payload: resp\r\n});\r\n\r\nconst fetchFailure = err => ({\r\n    type: constants.FETCH_FAILURE,\r\n    payload: err\r\n});\r\n\r\nexport const getData = () => dispatch => {\r\n    dispatch(fetchBegin);\r\n    axios.get(\"./db.json\")\r\n    .then(resp => {\r\n      //console.log(\"response\",resp.data);\r\n      dispatch(fetchSuccess(resp.data));\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n      dispatch(fetchFailure(err));\r\n    })\r\n}","export const FETCH_BEGIN = \"FETCH_BEGIN\";\r\nexport const FETCH_SUCCESS = \"FETCH_SUCCESS\";\r\nexport const FETCH_FAILURE = \"FETCH_FAILURE\";","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport VSensor from \"react-visibility-sensor\";\r\n\r\nclass VisibilitySensor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      active: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { active } = this.state;\r\n    const { once, children, ...theRest } = this.props;\r\n    return (\r\n      <VSensor\r\n        active={active}\r\n        onChange={(isVisible) =>\r\n          once &&\r\n          isVisible &&\r\n          this.setState({ active: false }, () => {}\r\n            //console.log(\"turned the thing off!\")\r\n          )\r\n        }\r\n        {...theRest}\r\n      >\r\n        {({ isVisible }) => children({ isVisible })}\r\n      </VSensor>\r\n    );\r\n  }\r\n}\r\n\r\nVisibilitySensor.propTypes = {\r\n  once: PropTypes.bool,\r\n  children: PropTypes.func.isRequired,\r\n};\r\n\r\nVisibilitySensor.defaultProps = {\r\n  once: false,\r\n};\r\n\r\nexport default VisibilitySensor;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Spring } from \"react-spring/renderprops\";\r\nimport VisibilitySensor from \"./VisibilitySensor\";\r\n\r\nconst Div = styled.div`    \r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    //height: 100vh;\r\n    min-height: 100vh;\r\n    //justify-content: center;\r\n    align-items: center;     \r\n    background-color: #282c34;\r\n    background: #000000 url('./images/bg/about.jpg') no-repeat top center;\r\n    //background-size: 100% auto;\r\n    h1{\r\n        margin-top: 35vh;\r\n    }\r\n    p{\r\n        text-align: center;\r\n        width: 70%;\r\n    }\r\n`\r\nconst About = (props) => {\r\n    const { data } = props;\r\n    return (\r\n        data.map(section => {\r\n            const {about} = section;\r\n            return (\r\n                <Div key={\"about\"}>                    \r\n                     <VisibilitySensor once>\r\n                        {({ isVisible }) => (\r\n                            <>\r\n                                <Spring delay={300} \r\n                                from={{                                                                \r\n                                    transform: \"scale(2)\",\r\n                                }}\r\n                                to={{\r\n                                    opacity: isVisible ? 1 : 0,\r\n                                    transform: \"scale(1)\"                                \r\n                                }}>\r\n                                    {(props) => (\r\n                                        <h1 style={{ ...props }}>{about.title}</h1>\r\n                                    )}\r\n                                </Spring>  \r\n                                <Spring delay={800} to={{\r\n                                    opacity: isVisible ? 1 : 0,\r\n                                    transform: isVisible ? \"scale(1)\" : \"scale(0.5)\"\r\n                                }}>\r\n                                    {(props) => (\r\n                                        <p style={{ ...props }}>{about.desc}</p>\r\n                                    )}\r\n                                </Spring>\r\n                            </>  \r\n                        )}\r\n                    </VisibilitySensor>\r\n                </Div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { ProgressBar } from \"react-bootstrap\";\r\nimport styled from 'styled-components';\r\nimport { Spring } from \"react-spring/renderprops\";\r\nimport VisibilitySensor from \"./VisibilitySensor\";\r\n\r\nconst Div = styled.div`    \r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    //height: 100vh;\r\n    min-height: 100vh;\r\n    //justify-content: center;\r\n    align-items: center; \r\n    background-color: #292928;\r\n    background: #000000 url('./images/bg/skills.jpg') no-repeat top center;\r\n    //background-size: 100% auto;\r\n    h1{\r\n        margin-top: 15vh;\r\n    }\r\n    ul{\r\n        list-style-type:none;\r\n    }\r\n    li{\r\n        margin-bottom:20px;\r\n    }\r\n`\r\n\r\nconst Skills = (props) => {\r\n    const { data } = props;\r\n    const barStyle = {\r\n        width: '60%',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n    return (\r\n        data.map((section, index) => {\r\n            const {menu, skills} = section;\r\n            const colors = [\"info\",\"warning\", \"\",\"success\",\"danger\"];\r\n\r\n            return (\r\n                <Div key={\"skills\"} >                   \r\n\r\n                    <VisibilitySensor once>\r\n                        {({ isVisible }) => (\r\n                            <>\r\n                                <Spring delay={300} to={{\r\n                                    opacity: isVisible ? 1 : 0,\r\n                                    transform: isVisible\r\n                                    ? \"scale(1)\"\r\n                                    : \"scale(2)\",\r\n                                }}>\r\n                                    {(props) => (\r\n                                        <h1 style={{ ...props }}>{menu[1]}</h1>\r\n                                    )}\r\n                                </Spring> \r\n                                <ul style={barStyle}>\r\n                                {\r\n                                    skills.map((item,index) => {\r\n                                        return (\r\n                                            <li key={index}>                                                        \r\n                                                <em>{item.skill}</em>\r\n                                                <Spring\r\n                                                    delay={50 * (index+1)}                                    \r\n                                                    to={{ number: isVisible ? 1 : 0 }}>\r\n                                                    {props => <ProgressBar variant={colors[index]} now={item.rating * props.number} />}\r\n                                                </Spring>                                                       \r\n                                                                                                       \r\n                                            </li>\r\n                                        )\r\n                                    })                    \r\n                                }                                            \r\n                                </ul>                                 \r\n                            </>  \r\n                        )}\r\n                    </VisibilitySensor>                    \r\n                </Div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default Skills;","import React from 'react';\r\nimport { Modal } from \"react-bootstrap\";\r\nimport styled from 'styled-components';\r\nimport \"./popup.css\";\r\n\r\nconst Img = styled.img`\r\n  max-width: 100%;\r\n  height: auto;\r\n`\r\nconst P = styled.p`\r\n  margin-top: 10px;\r\n`\r\n\r\nconst Popup = (props) => {\r\n  const {title, desc, img} = props;\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {title}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Img src={img} alt={title} />\r\n        <P>{desc}</P>\r\n      </Modal.Body>\r\n      {/* <Modal.Footer>\r\n        <Button onClick={props.onHide}>Close</Button> \r\n      </Modal.Footer>*/}\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default Popup;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Popup from './Popup';\r\n\r\nimport { Spring } from \"react-spring/renderprops\";\r\nimport VisibilitySensor from \"./VisibilitySensor\";\r\n\r\nconst Div = styled.div`    \r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    //height: 100vh;\r\n    min-height: 100vh;\r\n    //justify-content: center;\r\n    align-items: center; \r\n    background-color: #1f1f1e;\r\n    background: #000000 url('./images/bg/projects.jpg') no-repeat top center;\r\n    //background-size: 100% auto;\r\n    h1{\r\n        margin-top: 25vh;\r\n    }\r\n    @media only screen and (max-width: 600px) {\r\n        h1{\r\n            margin-top: 10vh;\r\n        }\r\n    }\r\n`\r\nconst Images = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-around;    \r\n`\r\nconst Wrapper = styled.div`\r\n    margin: 20px;\r\n    border: 0;  \r\n    background: none;\r\n    &:hover {              \r\n        filter: brightness(125%);   \r\n        cursor: pointer;    \r\n    }\r\n    img {\r\n        box-shadow: 5px 5px 8px #000000;\r\n    }\r\n`\r\n\r\nconst Projects = (props) => {\r\n    const { data } = props;\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [title, setTitle] = React.useState(\"\");\r\n    const [desc, setDesc] = React.useState(\"\");\r\n    const [img, setImg] = React.useState(\"\");\r\n\r\n    function onImgClick(title, desc, img) {\r\n        setModalShow(true);\r\n        setTitle(title);\r\n        setDesc(desc);\r\n        setImg(img);\r\n    };\r\n\r\n    return (\r\n        data.map((section, index) => {\r\n            const {menu, projects} = section;\r\n            return (\r\n                <Div key={\"projects\"}>\r\n                     <VisibilitySensor once>\r\n                        {({ isVisible }) => (\r\n                            <>\r\n                                <Spring delay={300} to={{\r\n                                    opacity: isVisible ? 1 : 0,\r\n                                    transform: isVisible\r\n                                    ? \"scale(1)\"\r\n                                    : \"scale(2)\",\r\n                                }}>\r\n                                    {(props) => (\r\n                                        <h1 style={{ ...props }}>{menu[2]}</h1>\r\n                                    )}\r\n                                </Spring> \r\n                   \r\n                                <Images>\r\n                                {\r\n                                    projects.map((item,index) => {\r\n                                        return (    \r\n                                            <Spring key={\"s\"+index} delay={300 * (index+1)} to={{\r\n                                                opacity: isVisible ? 1 : 0,\r\n                                                transform: isVisible ? \"scale(1) rotateY(0)\" : \"scale(0.5) rotateY(180deg)\"\r\n                                            }}>\r\n                                                {(props) => (\r\n                                                     <Wrapper style={{ ...props }} key={index}>                  \r\n                                                        <img src={item.thumb} alt={item.title} onClick={() => onImgClick(item.title, item.desc, item.img)} />\r\n                                                    </Wrapper>\r\n                                                )}\r\n                                            </Spring>                                             \r\n                                        )\r\n                                    })                    \r\n                                }   \r\n                                </Images>\r\n                          </>  \r\n                        )}\r\n                    </VisibilitySensor>      \r\n\r\n                    <Popup\r\n                        title={title}\r\n                        desc={desc}\r\n                        img={img}\r\n                        show={modalShow}\r\n                        onHide={() => setModalShow(false)}\r\n                    />             \r\n                </Div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Spring } from \"react-spring/renderprops\";\r\nimport VisibilitySensor from \"./VisibilitySensor\";\r\n\r\nconst Div = styled.div`    \r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    //height: 100vh;\r\n    min-height: 100vh;\r\n    //justify-content: center;\r\n    align-items: center; \r\n    background-color: #1a1a1a;\r\n    background: #000000 url('./images/bg/clients.jpg') no-repeat top center;\r\n    //background-size: 100% auto;\r\n    h1{\r\n        margin-top: 35vh;\r\n    }\r\n    @media only screen and (max-width: 600px) {\r\n        h1{\r\n            margin-top: 10vh;\r\n        }\r\n    }\r\n`\r\nconst Images = styled.div`\r\n    display: flex;   \r\n    flex-flow: row wrap;    \r\n    justify-content: space-around;    \r\n`\r\nconst Wrapper = styled.div`\r\n    margin: 20px;\r\n    box-shadow: 5px 5px 8px #000000;\r\n`\r\n\r\nconst Clients = (props) => {\r\n    const { data } = props;\r\n\r\n    return (\r\n        data.map(section => {\r\n            const {menu, clients} = section;\r\n            return (\r\n                <Div key={\"clients\"}>\r\n                    <VisibilitySensor once>\r\n                        {({ isVisible }) => (\r\n                            <>\r\n                                <Spring delay={300} to={{\r\n                                    opacity: isVisible ? 1 : 0,\r\n                                    transform: isVisible\r\n                                    ? \"scale(1)\"\r\n                                    : \"scale(2)\",\r\n                                }}>\r\n                                    {(props) => (\r\n                                        <h1 style={{ ...props }}>{menu[3]}</h1>\r\n                                    )}\r\n                                </Spring> \r\n\r\n                                <Images>\r\n                                {\r\n                                    clients.map((item, index) => {                         \r\n                                        return (   \r\n                                            <Spring key={\"s\"+index} delay={300 * (index+1)} to={{\r\n                                                opacity: isVisible ? 1 : 0,\r\n                                                transform: isVisible ? \"scale(1)\" : \"scale(0.5)\"\r\n                                            }}>\r\n                                                {(props) => (\r\n                                                     <Wrapper style={{ ...props }} key={index}>                  \r\n                                                        <img src={item} alt=\"\" />\r\n                                                    </Wrapper>\r\n                                                )}\r\n                                            </Spring>                                            \r\n                                        )\r\n                                    })                    \r\n                                }   \r\n                                </Images>   \r\n                            </>  \r\n                        )}\r\n                    </VisibilitySensor>                    \r\n                </Div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default Clients;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\nimport { faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport { Spring } from \"react-spring/renderprops\";\r\nimport VisibilitySensor from \"./VisibilitySensor\";\r\n\r\nconst Div = styled.div`    \r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    //height: 100vh;\r\n    min-height: 100vh;\r\n    //justify-content: center;\r\n    align-items: center; \r\n    background-color: #000000;\r\n    background: #000000 url('./images/bg/contact.jpg') no-repeat top center;\r\n    //background-size: 100% auto;\r\n    h1{\r\n        margin-top: 35vh;\r\n    }\r\n`\r\nconst Icons = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    a{\r\n        margin:20px;\r\n        color: white;\r\n        &:hover {              \r\n            filter: brightness(50%);   \r\n            cursor: pointer;    \r\n        }\r\n    }\r\n`\r\n\r\nconst Contact = (props) => {\r\n    const { data } = props;\r\n    \r\n    return (\r\n        data.map(section => {\r\n            const {contact} = section;\r\n            const typeArr = [contact.email, contact.linkedin, contact.github];\r\n            const tttleArr = [\"e-mail\", \"Linkedin\", \"GitHub\"];\r\n            const iconArr = [faEnvelope, faLinkedin, faGithub];\r\n\r\n            return (\r\n                <Div key={\"contact\"}>\r\n                     <VisibilitySensor once>\r\n                        {({ isVisible }) => (\r\n                            <>\r\n                                <Spring delay={300} to={{\r\n                                    opacity: isVisible ? 1 : 0,\r\n                                    transform: isVisible\r\n                                    ? \"scale(1)\"\r\n                                    : \"scale(2)\",\r\n                                }}>\r\n                                    {(props) => (\r\n                                        <h1 style={{ ...props }}>{contact.title}</h1>\r\n                                    )}\r\n                                </Spring>   \r\n                                <Spring config={{duration: 1000}} delay={600} to={{\r\n                                    opacity: isVisible ? 1 : 0\r\n                                }}>\r\n                                    {(props) => (\r\n                                        <p style={{ ...props }}>{contact.desc}</p>\r\n                                    )}\r\n                                </Spring>              \r\n                                \r\n                                <Icons> \r\n                                    {\r\n                                        typeArr.map((item, index) => {\r\n                                            return(                                                \r\n                                                <Spring key={\"s\"+index} delay={400 * (index+1)} to={{\r\n                                                    opacity: isVisible ? 1 : 0\r\n                                                }}>\r\n                                                    {(props) => (\r\n                                                         <a style={{ ...props }} href={item} title={tttleArr[index]} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                            <FontAwesomeIcon icon={iconArr[index]} />\r\n                                                        </a>\r\n                                                    )}\r\n                                                </Spring> \r\n                                            )\r\n                                        })\r\n                                    }           \r\n                                </Icons>\r\n                            </>  \r\n                        )}\r\n                    </VisibilitySensor>              \r\n                </Div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default Contact;","import React, {Component, Fragment} from 'react';\r\nimport './App.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { getData } from './actions/index';\r\n\r\nimport About from \"./components/About.js\";\r\nimport Skills from \"./components/Skills.js\";\r\nimport Projects from \"./components/Projects.js\";\r\nimport Clients from \"./components/Clients.js\";\r\nimport Contact from \"./components/Contact.js\";\r\n\r\nimport styled from 'styled-components';\r\nimport ScrollspyNav from \"react-scrollspy-nav\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Main = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n  overflow-x: hidden;\r\n  animation: fadein 2s;\r\n  div[data-nav] ul {\r\n      display: flex;\r\n      flex-direction: row;\r\n      list-style-type: none;\r\n      justify-content: center;\r\n      margin: 0;\r\n      padding: 0;\r\n  }\r\n  div[data-nav] li {\r\n    padding: 0 20px;\r\n  }\r\n  div[data-nav] a {\r\n    font-size: 0.6em;\r\n  }\r\n  .is-active{\r\n    background: #1e1e1e;\r\n    color: white !important;\r\n    pointer-events: none;\r\n  }\r\n  .bg-black{\r\n    background-color: black;\r\n  }\r\n\r\n  @media only screen and (max-width: 767px) {\r\n    div[data-nav] ul {\r\n      flex-direction: column;\r\n      text-align: center;\r\n    }\r\n    div[data-nav] a {\r\n      font-size: 1.5em;\r\n    }\r\n  }\r\n`\r\nconst Div = styled.div`\r\n  min-width: 100%;\r\n`\r\nclass App extends Component {\r\n  componentDidMount(){\r\n    const { getData } = this.props;\r\n    getData();\r\n  }\r\n\r\n  render(){\r\n    const { data, isLoading, err } = this.props;\r\n    \r\n    return (\r\n      <Main>\r\n        {err ? <p>{err.message}</p> : null}\r\n        \r\n        {\r\n          !isLoading ? \r\n            <Fragment>\r\n              <Navbar collapseOnSelect expand=\"md\" bg=\"black\" variant=\"dark\" fixed=\"top\">\r\n                <Navbar.Brand href=\"#home\"></Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                  <Nav className=\"mr-auto\" style={{margin:\"auto\"}}>\r\n                    <ScrollspyNav\r\n                      scrollTargetIds={[\"section_1\", \"section_2\", \"section_3\",\"section_4\"]}\r\n                      offset={0}\r\n                      activeNavClass=\"is-active\"\r\n                      scrollDuration=\"1000\"\r\n                      headerBackground=\"false\"\r\n                    >  \r\n                      {\r\n                        data.map((section, index) => {\r\n                          const {menu} = section;\r\n                          return (\r\n                            <ul key={index}>\r\n                              <li><Nav.Link href=\"/\">{menu[0]}</Nav.Link></li>\r\n                              <li><Nav.Link href=\"#section_1\">{menu[1]}</Nav.Link></li>\r\n                              <li><Nav.Link href=\"#section_2\">{menu[2]}</Nav.Link></li>\r\n                              <li><Nav.Link href=\"#section_3\">{menu[3]}</Nav.Link></li>\r\n                              <li><Nav.Link href=\"#section_4\">{menu[4]}</Nav.Link></li>\r\n                            </ul> \r\n                          )\r\n                        })\r\n                      }                                                  \r\n                    </ScrollspyNav>\r\n                  </Nav>\r\n                </Navbar.Collapse>\r\n              </Navbar>\r\n\r\n              <Div key=\"1\">\r\n                <About data={data}/>\r\n                <div id=\"section_1\"><Skills data={data}/></div>\r\n                <div id=\"section_2\"><Projects data={data}/></div>\r\n                <div id=\"section_3\"><Clients data={data}/></div>             \r\n                <div id=\"section_4\"><Contact data={data}/></div>             \r\n              </Div>\r\n            </Fragment>\r\n          :\r\n            <p>loading..</p>\r\n        }              \r\n      </Main>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  data: state.data,\r\n  isLoading: state.isLoading,\r\n  err: state.err\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n getData: () => dispatch(getData())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as constants from \"../constants\";\r\n\r\nconst initialState = {\r\n    isLoading: true,\r\n    data: {},\r\n    err: ''\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n switch (action.type) {\r\n  case constants.FETCH_BEGIN:\r\n   return {\r\n    ...state\r\n   }\r\n  case constants.FETCH_SUCCESS:\r\n   return {\r\n    ...state, data: action.payload, isLoading: false\r\n   }\r\n  case constants.FETCH_FAILURE:\r\n   return {\r\n    ...state, err: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"react-app-polyfill/ie11\";\r\nimport \"react-app-polyfill/stable\";\r\n\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={configureStore()}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\n\r\nexport default function configureStore() {\r\n return createStore(\r\n  rootReducer,\r\n   applyMiddleware(thunk)\r\n );\r\n}"],"sourceRoot":""}